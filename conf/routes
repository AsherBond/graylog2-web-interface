# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Authentication
GET         /login                                                                   @controllers.SessionsController.index()
POST        /login                                                                   @controllers.SessionsController.create()
GET         /logout                                                                  @controllers.SessionsController.destroy()

# Unconnected web interface
GET         /disconnected                                                            @controllers.LonesomeInterfaceController.index()

# Home page
GET         /                                                                        @controllers.DashboardController.index()

# Search
GET         /search                                                                  @controllers.SearchController.index(q ?= "", rangetype ?= "", relative:Integer ?= -1, from ?= "", to ?= "", keyword ?= "", interval ?= "", page:Integer ?= 1)

# Messages
GET         /messages/:index/:id/partial                                             @controllers.MessagesController.singleAsPartial(index: String, id: String)

# Streams
GET         /streams                                                                 @controllers.StreamsController.index()
GET         /streams/new                                                             @controllers.StreamsController.newStream()
POST        /streams/new                                                             @controllers.StreamsController.create()
POST        /streams/:stream_id/delete                                               @controllers.StreamsController.delete(stream_id: String)

# System
GET         /system                                                                  @controllers.SystemController.index(page:Integer ?= 1)
GET         /system/nodes                                                            @controllers.SystemController.nodes()
GET         /system/nodes/:node_id                                                   @controllers.SystemController.node(node_id: String)
GET         /system/threaddump/:node_id                                              @controllers.SystemController.threadDump(node_id: String)
GET         /system/inputs/:node_id                                                  @controllers.InputsController.manage(node_id: String)
POST        /system/inputs/:node_id                                                  @controllers.InputsController.launch(node_id: String)
POST        /system/inputs/:node_id/:input_id/terminate                              @controllers.InputsController.terminate(node_id: String, input_id: String)
POST        /system/inputs/:node_id/:input_id/staticfields                           @controllers.InputsController.addStaticField(node_id: String, input_id: String)
GET         /system/inputs/:node_id/:input_id/staticfields/:key/delete               @controllers.InputsController.removeStaticField(node_id: String, input_id: String, key: String)
GET         /system/mappers                                                          @controllers.MappersController.index()
GET         /system/metrics/:node_id                                                 @controllers.MetricsController.ofNode(node_id: String, prefilter ?= "")

# Extractors
GET         /system/inputs/:node_id/:input_id/extractors                             @controllers.ExtractorsController.manage(node_id: String, input_id: String)
GET         /system/inputs/:node_id/:input_id/extractors/new                         @controllers.ExtractorsController.newExtractor(node_id: String, input_id: String, extractor_type ?= "", field ?= "", example ?= "")
POST        /system/inputs/:node_id/:input_id/extractors                             @controllers.ExtractorsController.create(node_id: String, input_id: String)
POST        /system/inputs/:node_id/:input_id/extractors/:extractor_id/delete        @controllers.ExtractorsController.delete(node_id: String, input_id: String, extractor_id: String)

# Users
GET         /system/users                                                            @controllers.UsersController.index()
GET         /a/system/users/:username                                                @controllers.UsersController.isUniqueUsername(username: String)
POST        /system/users                                                            @controllers.UsersController.create()
POST        /system/users/delete/:username                                           @controllers.UsersController.delete(username: String)
GET         /system/users/show/:username                                             @controllers.UsersController.show(username: String)
POST        /system/users/save/:username                                             @controllers.UsersController.saveChanges(username: String)
GET         /system/users/new                                                        @controllers.UsersController.newUserForm()
GET         /system/users/edit/:username                                             @controllers.UsersController.editUserForm(username: String)
POST        /system/users/password/:username                                         @controllers.UsersController.changePassword(username: String)

#LDAP configuration
GET         /system/ldap                                                             @controllers.LdapController.index()
POST        /system/ldap                                                             @controllers.LdapController.saveLdapSettings()
POST        /a/system/ldap/testconnect                                               @controllers.LdapController.apiTestLdapConnection()
POST        /a/system/ldap/testlogin                                                 @controllers.LdapController.apiTestLdapLogin()

# Systemjobs
POST        /systemjobs/trigger                                                      @controllers.SystemJobsController.trigger()

# Logging
GET         /system/logging                                                          @controllers.LoggingController.index()

# Dashboards
GET         /dashboards                                                              @controllers.DashboardsController.index()
GET         /dashboards/:id                                                           @controllers.DashboardsController.show(id: String)
GET         /dashboards/new                                                          @controllers.DashboardsController.newDashboard()
POST        /dashboards/create                                                       @controllers.DashboardsController.create()
POST        /dashboards/:id/delete                                                   @controllers.DashboardsController.delete(id: String)

# API: Search (i.e. facets)
GET         /a/search/fieldstats                                                     @controllers.api.SearchApiController.fieldStats(q ?= "", field ?= "", rangetype ?= "", relative:Integer ?= -1, from ?= "", to ?= "", keyword ?= "")
GET         /a/search/fieldterms                                                     @controllers.api.SearchApiController.fieldTerms(q ?= "", field ?= "", rangetype ?= "", relative:Integer ?= -1, from ?= "", to ?= "", keyword ?= "")
GET         /a/search/fieldhistogram                                                 @controllers.api.SearchApiController.fieldHistogram(q ?= "", field ?= "", rangetype ?= "", relative:Integer ?= -1, from ?= "", to ?= "", keyword ?= "", interval ?= "")

# API: Message counts and histograms
GET         /a/messagecounts/histogram                                               @controllers.MessageCountsController.histogram(timerange ?= "")
GET         /a/messagecounts/total                                                   @controllers.MessageCountsController.total()

# API: Message analyzing
GET         /a/analyze/:index/:id/:field                                             @controllers.MessagesController.analyze(index: String, id: String, field: String)

# API: System
GET         /a/system/fields                                                         @controllers.api.SystemApiController.fields()
GET         /a/system/jobs                                                           @controllers.api.SystemApiController.jobs()
GET         /a/system/notifications                                                  @controllers.api.SystemApiController.notifications()
DELETE      /a/system/notifications/:notification_type                               @controllers.api.SystemApiController.deleteNotification(notification_type: String)
GET         /a/system/throughput                                                     @controllers.api.SystemApiController.totalThroughput()
GET         /a/system/throughput/node/:node_id                                       @controllers.api.SystemApiController.nodeThroughput(node_id: String)
PUT         /a/system/processing/pause                                               @controllers.api.SystemApiController.pauseMessageProcessing()
PUT         /a/system/processing/resume                                              @controllers.api.SystemApiController.resumeMessageProcessing()

# API: Inputs
GET         /a/system/inputs/:node_id/:input_id/recent_message                       @controllers.api.InputsApiController.recentMessage(node_id: String, input_id: String)
GET         /a/system/inputs/:node_id/:input_id/io                                   @controllers.api.InputsApiController.io(node_id: String, input_id: String)
GET         /a/system/inputs/:node_id/:input_id/connections                          @controllers.api.InputsApiController.connections(node_id: String, input_id: String)

# API: Messages
GET         /a/messages/:index/:id                                                   @controllers.MessagesController.single(index: String, id: String)

# API: Tools
GET         /a/tools/regex_test                                                      @controllers.api.ToolsApiController.regexTest(regex ?= "", string ?= "")
GET         /a/tools/substring_test                                                  @controllers.api.ToolsApiController.substringTest(start:Integer ?= 0, end:Integer ?= 0, string ?= "")
GET         /a/tools/split_and_index_test                                            @controllers.api.ToolsApiController.splitAndIndexTest(split_by:String ?= "", index:Integer ?= 0, string ?= "")
GET         /a/tools/natural_date_test                                               @controllers.api.ToolsApiController.naturalDateTest(string ?= "")

# API: Server Connection
GET         /a/connection/available                                                  @controllers.LonesomeInterfaceController.checkServerAvailability()

# API: Dashboards
GET         /a/dashboards                                                            @controllers.api.DashboardsApiController.index()
GET         /a/dashboards/:dashboard_id/widgets/:widget_id/value                     @controllers.api.DashboardsApiController.widgetValue(dashboard_id: String, widget_id: String)
POST        /a/dashboards/:dashboard_id/widgets                                      @controllers.api.DashboardsApiController.addWidget(dashboard_id: String)
POST        /a/dashboards/:dashboard_id/widgets/:widget_id/delete                    @controllers.api.DashboardsApiController.removeWidget(dashboard_id: String, widget_id: String)

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                                            controllers.Assets.at(path="/public", file)
